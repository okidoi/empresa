#MYSQL
#===========================================================
spring.datasource.url= jdbc:mysql://localhost:3306/empresadb?createDatabaseIfNotExist=true&useTimezone=true&serverTimezone=UTC
spring.datasource.username= root
spring.datasource.password=


#JPA
#===========================================================
# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none".
spring.jpa.hibernate.ddl-auto= update 

# Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.
# Habilita o filtro do Spring responsável por manter aberta uma transação até que o request esteja encerrado. 
# Isso vai garantir que não haja exceções do tipo Lazy Exception em operações com Fetch.LAZY. 
# Esse tipo de situação pode ocorrer quando mapeamos um atributo com uma anotação do tipo @OneToMany ou @ManyToMany.
spring.jpa.open-in-view= true 

# Whether to enable logging of SQL statements. Habilita um filtro no Spring para lidar com o problema de LazyException
spring.jpa.show-sql= true 

# Faz com que o Hibernate gere as chaves primárias nas tabelas conforme o tipo padrão do SGDB. Se você não deseja esse comportamento, deve setar essa propriedade como false, assim, o Hibernate vai gerar as chaves primárias conforme o que foi definido em cada classe de entidade pela anotação @GeneratedValue.
spring.jpa.hibernate.use-new-id-generator-mappings = false
#===========================================================



# THYMELEAF (Em desenvolvimento é melhor desabilitar o cache)

#Habilitar em produção 
spring.thymeleaf.cache= false   



spring.mvc.locale-resolver=fixed
spring.mvc.locale=pt_BR